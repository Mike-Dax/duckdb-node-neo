// This file is generated by generate-wrapper.py, please do not edit

static void RegisterGenerated(Env env, Object exports) {
	exports.Set(String::New(env, "open"),
	            Function::New<AsyncFunctionWrapper2<duckdb_state, const char *, duckdb_database *, duckdb_open>>(env));
	exports.Set(String::New(env, "open_ext"),
	            Function::New<AsyncFunctionWrapper4<duckdb_state, const char *, duckdb_database *, duckdb_config,
	                                                char **, duckdb_open_ext>>(env));
	exports.Set(String::New(env, "close"),
	            Function::New<AsyncFunctionWrapper1Void<duckdb_database *, duckdb_close>>(env));
	exports.Set(
	    String::New(env, "connect"),
	    Function::New<AsyncFunctionWrapper2<duckdb_state, duckdb_database, duckdb_connection *, duckdb_connect>>(env));
	exports.Set(String::New(env, "interrupt"),
	            Function::New<AsyncFunctionWrapper1Void<duckdb_connection, duckdb_interrupt>>(env));
	exports.Set(String::New(env, "query_progress"),
	            Function::New<FunctionWrapper1<double, duckdb_connection, duckdb_query_progress>>(env));
	exports.Set(String::New(env, "disconnect"),
	            Function::New<AsyncFunctionWrapper1Void<duckdb_connection *, duckdb_disconnect>>(env));
	exports.Set(String::New(env, "library_version"),
	            Function::New<FunctionWrapper0<const char *, duckdb_library_version>>(env));
	exports.Set(String::New(env, "create_config"),
	            Function::New<FunctionWrapper1<duckdb_state, duckdb_config *, duckdb_create_config>>(env));
	exports.Set(String::New(env, "config_count"), Function::New<FunctionWrapper0<size_t, duckdb_config_count>>(env));
	exports.Set(
	    String::New(env, "get_config_flag"),
	    Function::New<FunctionWrapper3<duckdb_state, size_t, const char **, const char **, duckdb_get_config_flag>>(
	        env));
	exports.Set(
	    String::New(env, "set_config"),
	    Function::New<FunctionWrapper3<duckdb_state, duckdb_config, const char *, const char *, duckdb_set_config>>(
	        env));
	exports.Set(String::New(env, "destroy_config"),
	            Function::New<FunctionWrapper1Void<duckdb_config *, duckdb_destroy_config>>(env));
	exports.Set(
	    String::New(env, "query"),
	    Function::New<
	        AsyncFunctionWrapper3<duckdb_state, duckdb_connection, const char *, duckdb_result *, duckdb_query>>(env));
	exports.Set(String::New(env, "destroy_result"),
	            Function::New<FunctionWrapper1Void<duckdb_result *, duckdb_destroy_result>>(env));
	exports.Set(String::New(env, "column_name"),
	            Function::New<FunctionWrapper2<const char *, duckdb_result *, idx_t, duckdb_column_name>>(env));
	exports.Set(String::New(env, "column_type"),
	            Function::New<FunctionWrapper2<duckdb_type, duckdb_result *, idx_t, duckdb_column_type>>(env));
	exports.Set(
	    String::New(env, "column_logical_type"),
	    Function::New<FunctionWrapper2<duckdb_logical_type, duckdb_result *, idx_t, duckdb_column_logical_type>>(env));
	exports.Set(String::New(env, "column_count"),
	            Function::New<FunctionWrapper1<idx_t, duckdb_result *, duckdb_column_count>>(env));
	exports.Set(String::New(env, "row_count"),
	            Function::New<FunctionWrapper1<idx_t, duckdb_result *, duckdb_row_count>>(env));
	exports.Set(String::New(env, "rows_changed"),
	            Function::New<FunctionWrapper1<idx_t, duckdb_result *, duckdb_rows_changed>>(env));
	exports.Set(String::New(env, "column_data"),
	            Function::New<FunctionWrapper2<void *, duckdb_result *, idx_t, duckdb_column_data>>(env));
	exports.Set(String::New(env, "nullmask_data"),
	            Function::New<FunctionWrapper2<bool *, duckdb_result *, idx_t, duckdb_nullmask_data>>(env));
	exports.Set(String::New(env, "result_error"),
	            Function::New<FunctionWrapper1<const char *, duckdb_result *, duckdb_result_error>>(env));
	exports.Set(String::New(env, "result_get_chunk"),
	            Function::New<FunctionWrapper2<duckdb_data_chunk, duckdb_result, idx_t, duckdb_result_get_chunk>>(env));
	exports.Set(String::New(env, "result_is_streaming"),
	            Function::New<FunctionWrapper1<bool, duckdb_result, duckdb_result_is_streaming>>(env));
	exports.Set(String::New(env, "result_chunk_count"),
	            Function::New<FunctionWrapper1<idx_t, duckdb_result, duckdb_result_chunk_count>>(env));
	exports.Set(String::New(env, "value_boolean"),
	            Function::New<FunctionWrapper3<bool, duckdb_result *, idx_t, idx_t, duckdb_value_boolean>>(env));
	exports.Set(String::New(env, "value_int8"),
	            Function::New<FunctionWrapper3<int8_t, duckdb_result *, idx_t, idx_t, duckdb_value_int8>>(env));
	exports.Set(String::New(env, "value_int16"),
	            Function::New<FunctionWrapper3<int16_t, duckdb_result *, idx_t, idx_t, duckdb_value_int16>>(env));
	exports.Set(String::New(env, "value_int32"),
	            Function::New<FunctionWrapper3<int32_t, duckdb_result *, idx_t, idx_t, duckdb_value_int32>>(env));
	exports.Set(String::New(env, "value_int64"),
	            Function::New<FunctionWrapper3<int64_t, duckdb_result *, idx_t, idx_t, duckdb_value_int64>>(env));
	exports.Set(
	    String::New(env, "value_hugeint"),
	    Function::New<FunctionWrapper3<duckdb_hugeint, duckdb_result *, idx_t, idx_t, duckdb_value_hugeint>>(env));
	exports.Set(
	    String::New(env, "value_decimal"),
	    Function::New<FunctionWrapper3<duckdb_decimal, duckdb_result *, idx_t, idx_t, duckdb_value_decimal>>(env));
	exports.Set(String::New(env, "value_uint8"),
	            Function::New<FunctionWrapper3<uint8_t, duckdb_result *, idx_t, idx_t, duckdb_value_uint8>>(env));
	exports.Set(String::New(env, "value_uint16"),
	            Function::New<FunctionWrapper3<uint16_t, duckdb_result *, idx_t, idx_t, duckdb_value_uint16>>(env));
	exports.Set(String::New(env, "value_uint32"),
	            Function::New<FunctionWrapper3<uint32_t, duckdb_result *, idx_t, idx_t, duckdb_value_uint32>>(env));
	exports.Set(String::New(env, "value_uint64"),
	            Function::New<FunctionWrapper3<uint64_t, duckdb_result *, idx_t, idx_t, duckdb_value_uint64>>(env));
	exports.Set(String::New(env, "value_float"),
	            Function::New<FunctionWrapper3<float, duckdb_result *, idx_t, idx_t, duckdb_value_float>>(env));
	exports.Set(String::New(env, "value_double"),
	            Function::New<FunctionWrapper3<double, duckdb_result *, idx_t, idx_t, duckdb_value_double>>(env));
	exports.Set(String::New(env, "value_date"),
	            Function::New<FunctionWrapper3<duckdb_date, duckdb_result *, idx_t, idx_t, duckdb_value_date>>(env));
	exports.Set(String::New(env, "value_time"),
	            Function::New<FunctionWrapper3<duckdb_time, duckdb_result *, idx_t, idx_t, duckdb_value_time>>(env));
	exports.Set(
	    String::New(env, "value_timestamp"),
	    Function::New<FunctionWrapper3<duckdb_timestamp, duckdb_result *, idx_t, idx_t, duckdb_value_timestamp>>(env));
	exports.Set(
	    String::New(env, "value_interval"),
	    Function::New<FunctionWrapper3<duckdb_interval, duckdb_result *, idx_t, idx_t, duckdb_value_interval>>(env));
	exports.Set(String::New(env, "value_varchar"),
	            Function::New<FunctionWrapper3<char *, duckdb_result *, idx_t, idx_t, duckdb_value_varchar>>(env));
	exports.Set(
	    String::New(env, "value_string"),
	    Function::New<FunctionWrapper3<duckdb_string, duckdb_result *, idx_t, idx_t, duckdb_value_string>>(env));
	exports.Set(
	    String::New(env, "value_varchar_internal"),
	    Function::New<FunctionWrapper3<char *, duckdb_result *, idx_t, idx_t, duckdb_value_varchar_internal>>(env));
	exports.Set(
	    String::New(env, "value_string_internal"),
	    Function::New<FunctionWrapper3<duckdb_string, duckdb_result *, idx_t, idx_t, duckdb_value_string_internal>>(
	        env));
	exports.Set(String::New(env, "value_blob"),
	            Function::New<FunctionWrapper3<duckdb_blob, duckdb_result *, idx_t, idx_t, duckdb_value_blob>>(env));
	exports.Set(String::New(env, "value_is_null"),
	            Function::New<FunctionWrapper3<bool, duckdb_result *, idx_t, idx_t, duckdb_value_is_null>>(env));
	exports.Set(String::New(env, "malloc"), Function::New<FunctionWrapper1<void *, size_t, duckdb_malloc>>(env));
	exports.Set(String::New(env, "free"), Function::New<FunctionWrapper1Void<void *, duckdb_free>>(env));
	exports.Set(String::New(env, "vector_size"), Function::New<FunctionWrapper0<idx_t, duckdb_vector_size>>(env));
	exports.Set(String::New(env, "string_is_inlined"),
	            Function::New<FunctionWrapper1<bool, duckdb_string_t, duckdb_string_is_inlined>>(env));
	exports.Set(String::New(env, "from_date"),
	            Function::New<FunctionWrapper1<duckdb_date_struct, duckdb_date, duckdb_from_date>>(env));
	exports.Set(String::New(env, "to_date"),
	            Function::New<FunctionWrapper1<duckdb_date, duckdb_date_struct, duckdb_to_date>>(env));
	exports.Set(String::New(env, "from_time"),
	            Function::New<FunctionWrapper1<duckdb_time_struct, duckdb_time, duckdb_from_time>>(env));
	exports.Set(String::New(env, "to_time"),
	            Function::New<FunctionWrapper1<duckdb_time, duckdb_time_struct, duckdb_to_time>>(env));
	exports.Set(String::New(env, "from_timestamp"),
	            Function::New<FunctionWrapper1<duckdb_timestamp_struct, duckdb_timestamp, duckdb_from_timestamp>>(env));
	exports.Set(String::New(env, "to_timestamp"),
	            Function::New<FunctionWrapper1<duckdb_timestamp, duckdb_timestamp_struct, duckdb_to_timestamp>>(env));
	exports.Set(String::New(env, "hugeint_to_double"),
	            Function::New<FunctionWrapper1<double, duckdb_hugeint, duckdb_hugeint_to_double>>(env));
	exports.Set(String::New(env, "double_to_hugeint"),
	            Function::New<FunctionWrapper1<duckdb_hugeint, double, duckdb_double_to_hugeint>>(env));
	exports.Set(
	    String::New(env, "double_to_decimal"),
	    Function::New<FunctionWrapper3<duckdb_decimal, double, uint8_t, uint8_t, duckdb_double_to_decimal>>(env));
	exports.Set(String::New(env, "decimal_to_double"),
	            Function::New<FunctionWrapper1<double, duckdb_decimal, duckdb_decimal_to_double>>(env));
	exports.Set(String::New(env, "prepare"),
	            Function::New<AsyncFunctionWrapper3<duckdb_state, duckdb_connection, const char *,
	                                                duckdb_prepared_statement *, duckdb_prepare>>(env));
	exports.Set(String::New(env, "destroy_prepare"),
	            Function::New<FunctionWrapper1Void<duckdb_prepared_statement *, duckdb_destroy_prepare>>(env));
	exports.Set(String::New(env, "prepare_error"),
	            Function::New<FunctionWrapper1<const char *, duckdb_prepared_statement, duckdb_prepare_error>>(env));
	exports.Set(String::New(env, "nparams"),
	            Function::New<FunctionWrapper1<idx_t, duckdb_prepared_statement, duckdb_nparams>>(env));
	exports.Set(
	    String::New(env, "parameter_name"),
	    Function::New<FunctionWrapper2<const char *, duckdb_prepared_statement, idx_t, duckdb_parameter_name>>(env));
	exports.Set(String::New(env, "param_type"),
	            Function::New<FunctionWrapper2<duckdb_type, duckdb_prepared_statement, idx_t, duckdb_param_type>>(env));
	exports.Set(String::New(env, "clear_bindings"),
	            Function::New<FunctionWrapper1<duckdb_state, duckdb_prepared_statement, duckdb_clear_bindings>>(env));
	exports.Set(
	    String::New(env, "bind_value"),
	    Function::New<
	        FunctionWrapper3<duckdb_state, duckdb_prepared_statement, idx_t, duckdb_value, duckdb_bind_value>>(env));
	exports.Set(String::New(env, "bind_parameter_index"),
	            Function::New<FunctionWrapper3<duckdb_state, duckdb_prepared_statement, idx_t *, const char *,
	                                           duckdb_bind_parameter_index>>(env));
	exports.Set(
	    String::New(env, "bind_boolean"),
	    Function::New<FunctionWrapper3<duckdb_state, duckdb_prepared_statement, idx_t, bool, duckdb_bind_boolean>>(
	        env));
	exports.Set(
	    String::New(env, "bind_int8"),
	    Function::New<FunctionWrapper3<duckdb_state, duckdb_prepared_statement, idx_t, int8_t, duckdb_bind_int8>>(env));
	exports.Set(
	    String::New(env, "bind_int16"),
	    Function::New<FunctionWrapper3<duckdb_state, duckdb_prepared_statement, idx_t, int16_t, duckdb_bind_int16>>(
	        env));
	exports.Set(
	    String::New(env, "bind_int32"),
	    Function::New<FunctionWrapper3<duckdb_state, duckdb_prepared_statement, idx_t, int32_t, duckdb_bind_int32>>(
	        env));
	exports.Set(
	    String::New(env, "bind_int64"),
	    Function::New<FunctionWrapper3<duckdb_state, duckdb_prepared_statement, idx_t, int64_t, duckdb_bind_int64>>(
	        env));
	exports.Set(String::New(env, "bind_hugeint"),
	            Function::New<FunctionWrapper3<duckdb_state, duckdb_prepared_statement, idx_t, duckdb_hugeint,
	                                           duckdb_bind_hugeint>>(env));
	exports.Set(String::New(env, "bind_decimal"),
	            Function::New<FunctionWrapper3<duckdb_state, duckdb_prepared_statement, idx_t, duckdb_decimal,
	                                           duckdb_bind_decimal>>(env));
	exports.Set(
	    String::New(env, "bind_uint8"),
	    Function::New<FunctionWrapper3<duckdb_state, duckdb_prepared_statement, idx_t, uint8_t, duckdb_bind_uint8>>(
	        env));
	exports.Set(
	    String::New(env, "bind_uint16"),
	    Function::New<FunctionWrapper3<duckdb_state, duckdb_prepared_statement, idx_t, uint16_t, duckdb_bind_uint16>>(
	        env));
	exports.Set(
	    String::New(env, "bind_uint32"),
	    Function::New<FunctionWrapper3<duckdb_state, duckdb_prepared_statement, idx_t, uint32_t, duckdb_bind_uint32>>(
	        env));
	exports.Set(
	    String::New(env, "bind_uint64"),
	    Function::New<FunctionWrapper3<duckdb_state, duckdb_prepared_statement, idx_t, uint64_t, duckdb_bind_uint64>>(
	        env));
	exports.Set(
	    String::New(env, "bind_float"),
	    Function::New<FunctionWrapper3<duckdb_state, duckdb_prepared_statement, idx_t, float, duckdb_bind_float>>(env));
	exports.Set(
	    String::New(env, "bind_double"),
	    Function::New<FunctionWrapper3<duckdb_state, duckdb_prepared_statement, idx_t, double, duckdb_bind_double>>(
	        env));
	exports.Set(
	    String::New(env, "bind_date"),
	    Function::New<FunctionWrapper3<duckdb_state, duckdb_prepared_statement, idx_t, duckdb_date, duckdb_bind_date>>(
	        env));
	exports.Set(
	    String::New(env, "bind_time"),
	    Function::New<FunctionWrapper3<duckdb_state, duckdb_prepared_statement, idx_t, duckdb_time, duckdb_bind_time>>(
	        env));
	exports.Set(String::New(env, "bind_timestamp"),
	            Function::New<FunctionWrapper3<duckdb_state, duckdb_prepared_statement, idx_t, duckdb_timestamp,
	                                           duckdb_bind_timestamp>>(env));
	exports.Set(String::New(env, "bind_interval"),
	            Function::New<FunctionWrapper3<duckdb_state, duckdb_prepared_statement, idx_t, duckdb_interval,
	                                           duckdb_bind_interval>>(env));
	exports.Set(
	    String::New(env, "bind_varchar"),
	    Function::New<
	        FunctionWrapper3<duckdb_state, duckdb_prepared_statement, idx_t, const char *, duckdb_bind_varchar>>(env));
	exports.Set(String::New(env, "bind_varchar_length"),
	            Function::New<FunctionWrapper4<duckdb_state, duckdb_prepared_statement, idx_t, const char *, idx_t,
	                                           duckdb_bind_varchar_length>>(env));
	exports.Set(String::New(env, "bind_blob"),
	            Function::New<FunctionWrapper4<duckdb_state, duckdb_prepared_statement, idx_t, const void *, idx_t,
	                                           duckdb_bind_blob>>(env));
	exports.Set(String::New(env, "bind_null"),
	            Function::New<FunctionWrapper2<duckdb_state, duckdb_prepared_statement, idx_t, duckdb_bind_null>>(env));
	exports.Set(String::New(env, "execute_prepared"),
	            Function::New<AsyncFunctionWrapper2<duckdb_state, duckdb_prepared_statement, duckdb_result *,
	                                                duckdb_execute_prepared>>(env));
	exports.Set(String::New(env, "extract_statements"),
	            Function::New<AsyncFunctionWrapper3<idx_t, duckdb_connection, const char *,
	                                                duckdb_extracted_statements *, duckdb_extract_statements>>(env));
	exports.Set(
	    String::New(env, "prepare_extracted_statement"),
	    Function::New<AsyncFunctionWrapper4<duckdb_state, duckdb_connection, duckdb_extracted_statements, idx_t,
	                                        duckdb_prepared_statement *, duckdb_prepare_extracted_statement>>(env));
	exports.Set(
	    String::New(env, "extract_statements_error"),
	    Function::New<FunctionWrapper1<const char *, duckdb_extracted_statements, duckdb_extract_statements_error>>(
	        env));
	exports.Set(String::New(env, "destroy_extracted"),
	            Function::New<FunctionWrapper1Void<duckdb_extracted_statements *, duckdb_destroy_extracted>>(env));
	exports.Set(String::New(env, "pending_prepared"),
	            Function::New<FunctionWrapper2<duckdb_state, duckdb_prepared_statement, duckdb_pending_result *,
	                                           duckdb_pending_prepared>>(env));
	exports.Set(String::New(env, "pending_prepared_streaming"),
	            Function::New<FunctionWrapper2<duckdb_state, duckdb_prepared_statement, duckdb_pending_result *,
	                                           duckdb_pending_prepared_streaming>>(env));
	exports.Set(String::New(env, "destroy_pending"),
	            Function::New<FunctionWrapper1Void<duckdb_pending_result *, duckdb_destroy_pending>>(env));
	exports.Set(String::New(env, "pending_error"),
	            Function::New<FunctionWrapper1<const char *, duckdb_pending_result, duckdb_pending_error>>(env));
	exports.Set(
	    String::New(env, "pending_execute_task"),
	    Function::New<FunctionWrapper1<duckdb_pending_state, duckdb_pending_result, duckdb_pending_execute_task>>(env));
	exports.Set(
	    String::New(env, "execute_pending"),
	    Function::New<
	        AsyncFunctionWrapper2<duckdb_state, duckdb_pending_result, duckdb_result *, duckdb_execute_pending>>(env));
	exports.Set(String::New(env, "pending_execution_is_finished"),
	            Function::New<FunctionWrapper1<bool, duckdb_pending_state, duckdb_pending_execution_is_finished>>(env));
	exports.Set(String::New(env, "destroy_value"),
	            Function::New<FunctionWrapper1Void<duckdb_value *, duckdb_destroy_value>>(env));
	exports.Set(String::New(env, "create_varchar"),
	            Function::New<FunctionWrapper1<duckdb_value, const char *, duckdb_create_varchar>>(env));
	exports.Set(String::New(env, "create_varchar_length"),
	            Function::New<FunctionWrapper2<duckdb_value, const char *, idx_t, duckdb_create_varchar_length>>(env));
	exports.Set(String::New(env, "create_int64"),
	            Function::New<FunctionWrapper1<duckdb_value, int64_t, duckdb_create_int64>>(env));
	exports.Set(String::New(env, "get_varchar"),
	            Function::New<FunctionWrapper1<char *, duckdb_value, duckdb_get_varchar>>(env));
	exports.Set(String::New(env, "get_int64"),
	            Function::New<FunctionWrapper1<int64_t, duckdb_value, duckdb_get_int64>>(env));
	exports.Set(String::New(env, "create_logical_type"),
	            Function::New<FunctionWrapper1<duckdb_logical_type, duckdb_type, duckdb_create_logical_type>>(env));
	exports.Set(
	    String::New(env, "create_list_type"),
	    Function::New<FunctionWrapper1<duckdb_logical_type, duckdb_logical_type, duckdb_create_list_type>>(env));
	exports.Set(String::New(env, "create_map_type"),
	            Function::New<FunctionWrapper2<duckdb_logical_type, duckdb_logical_type, duckdb_logical_type,
	                                           duckdb_create_map_type>>(env));
	exports.Set(String::New(env, "create_union_type"),
	            Function::New<FunctionWrapper3<duckdb_logical_type, duckdb_logical_type, const char **, idx_t,
	                                           duckdb_create_union_type>>(env));
	exports.Set(String::New(env, "create_struct_type"),
	            Function::New<FunctionWrapper3<duckdb_logical_type, duckdb_logical_type *, const char **, idx_t,
	                                           duckdb_create_struct_type>>(env));
	exports.Set(
	    String::New(env, "create_decimal_type"),
	    Function::New<FunctionWrapper2<duckdb_logical_type, uint8_t, uint8_t, duckdb_create_decimal_type>>(env));
	exports.Set(String::New(env, "get_type_id"),
	            Function::New<FunctionWrapper1<duckdb_type, duckdb_logical_type, duckdb_get_type_id>>(env));
	exports.Set(String::New(env, "decimal_width"),
	            Function::New<FunctionWrapper1<uint8_t, duckdb_logical_type, duckdb_decimal_width>>(env));
	exports.Set(String::New(env, "decimal_scale"),
	            Function::New<FunctionWrapper1<uint8_t, duckdb_logical_type, duckdb_decimal_scale>>(env));
	exports.Set(String::New(env, "decimal_internal_type"),
	            Function::New<FunctionWrapper1<duckdb_type, duckdb_logical_type, duckdb_decimal_internal_type>>(env));
	exports.Set(String::New(env, "enum_internal_type"),
	            Function::New<FunctionWrapper1<duckdb_type, duckdb_logical_type, duckdb_enum_internal_type>>(env));
	exports.Set(String::New(env, "enum_dictionary_size"),
	            Function::New<FunctionWrapper1<uint32_t, duckdb_logical_type, duckdb_enum_dictionary_size>>(env));
	exports.Set(String::New(env, "enum_dictionary_value"),
	            Function::New<FunctionWrapper2<char *, duckdb_logical_type, idx_t, duckdb_enum_dictionary_value>>(env));
	exports.Set(
	    String::New(env, "list_type_child_type"),
	    Function::New<FunctionWrapper1<duckdb_logical_type, duckdb_logical_type, duckdb_list_type_child_type>>(env));
	exports.Set(
	    String::New(env, "map_type_key_type"),
	    Function::New<FunctionWrapper1<duckdb_logical_type, duckdb_logical_type, duckdb_map_type_key_type>>(env));
	exports.Set(
	    String::New(env, "map_type_value_type"),
	    Function::New<FunctionWrapper1<duckdb_logical_type, duckdb_logical_type, duckdb_map_type_value_type>>(env));
	exports.Set(String::New(env, "struct_type_child_count"),
	            Function::New<FunctionWrapper1<idx_t, duckdb_logical_type, duckdb_struct_type_child_count>>(env));
	exports.Set(
	    String::New(env, "struct_type_child_name"),
	    Function::New<FunctionWrapper2<char *, duckdb_logical_type, idx_t, duckdb_struct_type_child_name>>(env));
	exports.Set(
	    String::New(env, "struct_type_child_type"),
	    Function::New<FunctionWrapper2<duckdb_logical_type, duckdb_logical_type, idx_t, duckdb_struct_type_child_type>>(
	        env));
	exports.Set(String::New(env, "union_type_member_count"),
	            Function::New<FunctionWrapper1<idx_t, duckdb_logical_type, duckdb_union_type_member_count>>(env));
	exports.Set(
	    String::New(env, "union_type_member_name"),
	    Function::New<FunctionWrapper2<char *, duckdb_logical_type, idx_t, duckdb_union_type_member_name>>(env));
	exports.Set(
	    String::New(env, "union_type_member_type"),
	    Function::New<FunctionWrapper2<duckdb_logical_type, duckdb_logical_type, idx_t, duckdb_union_type_member_type>>(
	        env));
	exports.Set(String::New(env, "destroy_logical_type"),
	            Function::New<FunctionWrapper1Void<duckdb_logical_type *, duckdb_destroy_logical_type>>(env));
	exports.Set(
	    String::New(env, "create_data_chunk"),
	    Function::New<FunctionWrapper2<duckdb_data_chunk, duckdb_logical_type *, idx_t, duckdb_create_data_chunk>>(
	        env));
	exports.Set(String::New(env, "destroy_data_chunk"),
	            Function::New<FunctionWrapper1Void<duckdb_data_chunk *, duckdb_destroy_data_chunk>>(env));
	exports.Set(String::New(env, "data_chunk_reset"),
	            Function::New<FunctionWrapper1Void<duckdb_data_chunk, duckdb_data_chunk_reset>>(env));
	exports.Set(String::New(env, "data_chunk_get_column_count"),
	            Function::New<FunctionWrapper1<idx_t, duckdb_data_chunk, duckdb_data_chunk_get_column_count>>(env));
	exports.Set(
	    String::New(env, "data_chunk_get_vector"),
	    Function::New<FunctionWrapper2<duckdb_vector, duckdb_data_chunk, idx_t, duckdb_data_chunk_get_vector>>(env));
	exports.Set(String::New(env, "data_chunk_get_size"),
	            Function::New<FunctionWrapper1<idx_t, duckdb_data_chunk, duckdb_data_chunk_get_size>>(env));
	exports.Set(String::New(env, "data_chunk_set_size"),
	            Function::New<FunctionWrapper2Void<duckdb_data_chunk, idx_t, duckdb_data_chunk_set_size>>(env));
	exports.Set(
	    String::New(env, "vector_get_column_type"),
	    Function::New<FunctionWrapper1<duckdb_logical_type, duckdb_vector, duckdb_vector_get_column_type>>(env));
	exports.Set(String::New(env, "vector_get_data"),
	            Function::New<FunctionWrapper1<void *, duckdb_vector, duckdb_vector_get_data>>(env));
	exports.Set(String::New(env, "vector_get_validity"),
	            Function::New<FunctionWrapper1<uint64_t *, duckdb_vector, duckdb_vector_get_validity>>(env));
	exports.Set(String::New(env, "vector_ensure_validity_writable"),
	            Function::New<FunctionWrapper1Void<duckdb_vector, duckdb_vector_ensure_validity_writable>>(env));
	exports.Set(
	    String::New(env, "vector_assign_string_element"),
	    Function::New<FunctionWrapper3Void<duckdb_vector, idx_t, const char *, duckdb_vector_assign_string_element>>(
	        env));
	exports.Set(String::New(env, "vector_assign_string_element_len"),
	            Function::New<FunctionWrapper4Void<duckdb_vector, idx_t, const char *, idx_t,
	                                               duckdb_vector_assign_string_element_len>>(env));
	exports.Set(String::New(env, "list_vector_get_child"),
	            Function::New<FunctionWrapper1<duckdb_vector, duckdb_vector, duckdb_list_vector_get_child>>(env));
	exports.Set(String::New(env, "list_vector_get_size"),
	            Function::New<FunctionWrapper1<idx_t, duckdb_vector, duckdb_list_vector_get_size>>(env));
	exports.Set(String::New(env, "list_vector_set_size"),
	            Function::New<FunctionWrapper2<duckdb_state, duckdb_vector, idx_t, duckdb_list_vector_set_size>>(env));
	exports.Set(String::New(env, "list_vector_reserve"),
	            Function::New<FunctionWrapper2<duckdb_state, duckdb_vector, idx_t, duckdb_list_vector_reserve>>(env));
	exports.Set(
	    String::New(env, "struct_vector_get_child"),
	    Function::New<FunctionWrapper2<duckdb_vector, duckdb_vector, idx_t, duckdb_struct_vector_get_child>>(env));
	exports.Set(String::New(env, "validity_row_is_valid"),
	            Function::New<FunctionWrapper2<bool, uint64_t *, idx_t, duckdb_validity_row_is_valid>>(env));
	exports.Set(String::New(env, "validity_set_row_validity"),
	            Function::New<FunctionWrapper3Void<uint64_t *, idx_t, bool, duckdb_validity_set_row_validity>>(env));
	exports.Set(String::New(env, "validity_set_row_invalid"),
	            Function::New<FunctionWrapper2Void<uint64_t *, idx_t, duckdb_validity_set_row_invalid>>(env));
	exports.Set(String::New(env, "validity_set_row_valid"),
	            Function::New<FunctionWrapper2Void<uint64_t *, idx_t, duckdb_validity_set_row_valid>>(env));
	exports.Set(String::New(env, "bind_get_extra_info"),
	            Function::New<FunctionWrapper1<void *, duckdb_bind_info, duckdb_bind_get_extra_info>>(env));
	exports.Set(String::New(env, "bind_add_result_column"),
	            Function::New<FunctionWrapper3Void<duckdb_bind_info, const char *, duckdb_logical_type,
	                                               duckdb_bind_add_result_column>>(env));
	exports.Set(String::New(env, "bind_get_parameter_count"),
	            Function::New<FunctionWrapper1<idx_t, duckdb_bind_info, duckdb_bind_get_parameter_count>>(env));
	exports.Set(String::New(env, "bind_get_parameter"),
	            Function::New<FunctionWrapper2<duckdb_value, duckdb_bind_info, idx_t, duckdb_bind_get_parameter>>(env));
	exports.Set(
	    String::New(env, "bind_get_named_parameter"),
	    Function::New<FunctionWrapper2<duckdb_value, duckdb_bind_info, const char *, duckdb_bind_get_named_parameter>>(
	        env));
	exports.Set(
	    String::New(env, "bind_set_bind_data"),
	    Function::New<
	        FunctionWrapper3Void<duckdb_bind_info, void *, duckdb_delete_callback_t, duckdb_bind_set_bind_data>>(env));
	exports.Set(String::New(env, "bind_set_cardinality"),
	            Function::New<FunctionWrapper3Void<duckdb_bind_info, idx_t, bool, duckdb_bind_set_cardinality>>(env));
	exports.Set(String::New(env, "bind_set_error"),
	            Function::New<FunctionWrapper2Void<duckdb_bind_info, const char *, duckdb_bind_set_error>>(env));
	exports.Set(String::New(env, "init_get_extra_info"),
	            Function::New<FunctionWrapper1<void *, duckdb_init_info, duckdb_init_get_extra_info>>(env));
	exports.Set(String::New(env, "init_get_bind_data"),
	            Function::New<FunctionWrapper1<void *, duckdb_init_info, duckdb_init_get_bind_data>>(env));
	exports.Set(
	    String::New(env, "init_set_init_data"),
	    Function::New<
	        FunctionWrapper3Void<duckdb_init_info, void *, duckdb_delete_callback_t, duckdb_init_set_init_data>>(env));
	exports.Set(String::New(env, "init_get_column_count"),
	            Function::New<FunctionWrapper1<idx_t, duckdb_init_info, duckdb_init_get_column_count>>(env));
	exports.Set(String::New(env, "init_get_column_index"),
	            Function::New<FunctionWrapper2<idx_t, duckdb_init_info, idx_t, duckdb_init_get_column_index>>(env));
	exports.Set(String::New(env, "init_set_max_threads"),
	            Function::New<FunctionWrapper2Void<duckdb_init_info, idx_t, duckdb_init_set_max_threads>>(env));
	exports.Set(String::New(env, "init_set_error"),
	            Function::New<FunctionWrapper2Void<duckdb_init_info, const char *, duckdb_init_set_error>>(env));
	exports.Set(String::New(env, "function_get_extra_info"),
	            Function::New<FunctionWrapper1<void *, duckdb_function_info, duckdb_function_get_extra_info>>(env));
	exports.Set(String::New(env, "function_get_bind_data"),
	            Function::New<FunctionWrapper1<void *, duckdb_function_info, duckdb_function_get_bind_data>>(env));
	exports.Set(String::New(env, "function_get_init_data"),
	            Function::New<FunctionWrapper1<void *, duckdb_function_info, duckdb_function_get_init_data>>(env));
	exports.Set(
	    String::New(env, "function_get_local_init_data"),
	    Function::New<FunctionWrapper1<void *, duckdb_function_info, duckdb_function_get_local_init_data>>(env));
	exports.Set(
	    String::New(env, "function_set_error"),
	    Function::New<FunctionWrapper2Void<duckdb_function_info, const char *, duckdb_function_set_error>>(env));
	exports.Set(String::New(env, "appender_create"),
	            Function::New<AsyncFunctionWrapper4<duckdb_state, duckdb_connection, const char *, const char *,
	                                                duckdb_appender *, duckdb_appender_create>>(env));
	exports.Set(String::New(env, "appender_error"),
	            Function::New<FunctionWrapper1<const char *, duckdb_appender, duckdb_appender_error>>(env));
	exports.Set(String::New(env, "appender_flush"),
	            Function::New<AsyncFunctionWrapper1<duckdb_state, duckdb_appender, duckdb_appender_flush>>(env));
	exports.Set(String::New(env, "appender_close"),
	            Function::New<AsyncFunctionWrapper1<duckdb_state, duckdb_appender, duckdb_appender_close>>(env));
	exports.Set(String::New(env, "appender_destroy"),
	            Function::New<AsyncFunctionWrapper1<duckdb_state, duckdb_appender *, duckdb_appender_destroy>>(env));
	exports.Set(String::New(env, "appender_begin_row"),
	            Function::New<FunctionWrapper1<duckdb_state, duckdb_appender, duckdb_appender_begin_row>>(env));
	exports.Set(String::New(env, "appender_end_row"),
	            Function::New<FunctionWrapper1<duckdb_state, duckdb_appender, duckdb_appender_end_row>>(env));
	exports.Set(String::New(env, "append_bool"),
	            Function::New<FunctionWrapper2<duckdb_state, duckdb_appender, bool, duckdb_append_bool>>(env));
	exports.Set(String::New(env, "append_int8"),
	            Function::New<FunctionWrapper2<duckdb_state, duckdb_appender, int8_t, duckdb_append_int8>>(env));
	exports.Set(String::New(env, "append_int16"),
	            Function::New<FunctionWrapper2<duckdb_state, duckdb_appender, int16_t, duckdb_append_int16>>(env));
	exports.Set(String::New(env, "append_int32"),
	            Function::New<FunctionWrapper2<duckdb_state, duckdb_appender, int32_t, duckdb_append_int32>>(env));
	exports.Set(String::New(env, "append_int64"),
	            Function::New<FunctionWrapper2<duckdb_state, duckdb_appender, int64_t, duckdb_append_int64>>(env));
	exports.Set(
	    String::New(env, "append_hugeint"),
	    Function::New<FunctionWrapper2<duckdb_state, duckdb_appender, duckdb_hugeint, duckdb_append_hugeint>>(env));
	exports.Set(String::New(env, "append_uint8"),
	            Function::New<FunctionWrapper2<duckdb_state, duckdb_appender, uint8_t, duckdb_append_uint8>>(env));
	exports.Set(String::New(env, "append_uint16"),
	            Function::New<FunctionWrapper2<duckdb_state, duckdb_appender, uint16_t, duckdb_append_uint16>>(env));
	exports.Set(String::New(env, "append_uint32"),
	            Function::New<FunctionWrapper2<duckdb_state, duckdb_appender, uint32_t, duckdb_append_uint32>>(env));
	exports.Set(String::New(env, "append_uint64"),
	            Function::New<FunctionWrapper2<duckdb_state, duckdb_appender, uint64_t, duckdb_append_uint64>>(env));
	exports.Set(String::New(env, "append_float"),
	            Function::New<FunctionWrapper2<duckdb_state, duckdb_appender, float, duckdb_append_float>>(env));
	exports.Set(String::New(env, "append_double"),
	            Function::New<FunctionWrapper2<duckdb_state, duckdb_appender, double, duckdb_append_double>>(env));
	exports.Set(String::New(env, "append_date"),
	            Function::New<FunctionWrapper2<duckdb_state, duckdb_appender, duckdb_date, duckdb_append_date>>(env));
	exports.Set(String::New(env, "append_time"),
	            Function::New<FunctionWrapper2<duckdb_state, duckdb_appender, duckdb_time, duckdb_append_time>>(env));
	exports.Set(
	    String::New(env, "append_timestamp"),
	    Function::New<FunctionWrapper2<duckdb_state, duckdb_appender, duckdb_timestamp, duckdb_append_timestamp>>(env));
	exports.Set(
	    String::New(env, "append_interval"),
	    Function::New<FunctionWrapper2<duckdb_state, duckdb_appender, duckdb_interval, duckdb_append_interval>>(env));
	exports.Set(
	    String::New(env, "append_varchar"),
	    Function::New<FunctionWrapper2<duckdb_state, duckdb_appender, const char *, duckdb_append_varchar>>(env));
	exports.Set(
	    String::New(env, "append_varchar_length"),
	    Function::New<
	        FunctionWrapper3<duckdb_state, duckdb_appender, const char *, idx_t, duckdb_append_varchar_length>>(env));
	exports.Set(
	    String::New(env, "append_blob"),
	    Function::New<FunctionWrapper3<duckdb_state, duckdb_appender, const void *, idx_t, duckdb_append_blob>>(env));
	exports.Set(String::New(env, "append_null"),
	            Function::New<FunctionWrapper1<duckdb_state, duckdb_appender, duckdb_append_null>>(env));
	exports.Set(
	    String::New(env, "append_data_chunk"),
	    Function::New<FunctionWrapper2<duckdb_state, duckdb_appender, duckdb_data_chunk, duckdb_append_data_chunk>>(
	        env));
	exports.Set(String::New(env, "execute_tasks"),
	            Function::New<AsyncFunctionWrapper2Void<duckdb_database, idx_t, duckdb_execute_tasks>>(env));
	exports.Set(String::New(env, "create_task_state"),
	            Function::New<FunctionWrapper1<duckdb_task_state, duckdb_database, duckdb_create_task_state>>(env));
	exports.Set(String::New(env, "execute_tasks_state"),
	            Function::New<FunctionWrapper1Void<duckdb_task_state, duckdb_execute_tasks_state>>(env));
	exports.Set(String::New(env, "execute_n_tasks_state"),
	            Function::New<FunctionWrapper2<idx_t, duckdb_task_state, idx_t, duckdb_execute_n_tasks_state>>(env));
	exports.Set(String::New(env, "finish_execution"),
	            Function::New<FunctionWrapper1Void<duckdb_task_state, duckdb_finish_execution>>(env));
	exports.Set(String::New(env, "task_state_is_finished"),
	            Function::New<FunctionWrapper1<bool, duckdb_task_state, duckdb_task_state_is_finished>>(env));
	exports.Set(String::New(env, "destroy_task_state"),
	            Function::New<FunctionWrapper1Void<duckdb_task_state, duckdb_destroy_task_state>>(env));
	exports.Set(String::New(env, "execution_is_finished"),
	            Function::New<FunctionWrapper1<bool, duckdb_connection, duckdb_execution_is_finished>>(env));
	exports.Set(String::New(env, "stream_fetch_chunk"),
	            Function::New<AsyncFunctionWrapper1<duckdb_data_chunk, duckdb_result, duckdb_stream_fetch_chunk>>(env));
}
